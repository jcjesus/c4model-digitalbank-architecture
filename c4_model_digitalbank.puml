@startuml "context_diagram"
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml
!define OUTPUTPATH src/plantuml/diagramas/L1-Context/
!define OUTPUTFORMAT png

' Título do diagrama de contexto
title Sistema Bancário Digital - Diagrama de Contexto (Level 1)

' Pessoas
Person(customer, "Cliente", "Usuário do banco que acessa serviços digitais")
Person(employee, "Funcionário", "Funcionário do banco que gerencia o sistema")

' Sistemas
System(banking_system, "Sistema Bancário Digital", "Sistema principal que gerencia contas e transações")
System_Ext(payment_system, "Sistema de Pagamentos", "Sistema externo para processamento de pagamentos")
System_Ext(identity_system, "Sistema de Identidade", "Sistema externo para verificação de identidade")

' Relacionamentos
Rel(customer, banking_system, "Usa", "HTTPS")
Rel(employee, banking_system, "Gerencia", "HTTPS")
Rel(banking_system, payment_system, "Integra com", "API")
Rel(banking_system, identity_system, "Verifica identidade via", "API")

@enduml

@startuml "container_diagram"
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
!define OUTPUTPATH src/plantuml/diagramas/L2-Container/
!define OUTPUTFORMAT png

' Título do diagrama de container
title Sistema Bancário Digital - Diagrama de Container (Level 2)

' Pessoas
Person(customer, "Cliente", "Usuário do banco que acessa serviços digitais")

' Sistema principal e seus containers
System_Boundary(banking_system, "Sistema Bancário Digital") {
    Container(web_app, "Aplicação Web", "Angular", "Permite aos clientes gerenciar suas contas bancárias online")
    Container(mobile_app, "Aplicativo Móvel", "Flutter", "Permite aos clientes gerenciar suas contas em dispositivos móveis")
    Container(api_app, "API Application", "ASP.NET Core", "Fornece funcionalidades bancárias via API REST")
    Container(account_service, "Serviço de Contas", "Java/Spring", "Gerencia operações relacionadas a contas")
    Container(notification_service, "Serviço de Notificações", "Node.js", "Envia notificações aos clientes")
    ContainerDb(database, "Banco de Dados", "SQL Server", "Armazena informações de clientes, contas e transações")
}

' Sistemas externos
System_Ext(payment_system, "Sistema de Pagamentos", "Sistema externo para processamento de pagamentos")
System_Ext(identity_system, "Sistema de Identidade", "Sistema externo para verificação de identidade")

' Relacionamentos
Rel(customer, web_app, "Acessa", "HTTPS")
Rel(customer, mobile_app, "Usa", "HTTPS")
Rel(web_app, api_app, "Usa", "JSON/HTTPS")
Rel(mobile_app, api_app, "Usa", "JSON/HTTPS")
Rel(api_app, account_service, "Usa", "gRPC")
Rel(api_app, notification_service, "Usa", "Mensageria/Kafka")
Rel(account_service, database, "Lê/Escreve", "JDBC")
Rel(notification_service, database, "Lê", "JDBC")
Rel(api_app, payment_system, "Usa", "HTTPS")
Rel(api_app, identity_system, "Usa", "HTTPS")

@enduml

@startuml "component_account_service_diagram"
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml
!define OUTPUTPATH src/plantuml/diagramas/L3-component/
!define OUTPUTFORMAT png

' Título do diagrama de componentes
title Sistema Bancário Digital - Diagrama de Componentes do Serviço de Contas (Level 3)

' Container do serviço de contas e seus componentes
Container_Boundary(account_service, "Serviço de Contas") {
    Component(account_controller, "AccountController", "Spring REST Controller", "Fornece API REST para gerenciamento de contas")
    Component(transaction_controller, "TransactionController", "Spring REST Controller", "Gerencia transações financeiras")
    Component(audit_controller, "AuditController", "Spring REST Controller", "Rastreia acessos e modificações")
    Component(account_service_component, "AccountService", "Spring Service", "Implementa lógica de negócio para contas")
    Component(account_repository, "AccountRepository", "Spring Data", "Operações CRUD para contas")
    Component(transaction_repository, "TransactionRepository", "Spring Data", "Operações CRUD para transações")
    Component(audit_repository, "AuditRepository", "Spring Data", "Registra logs de auditoria")
}

' Container de banco de dados
ContainerDb(database, "Banco de Dados", "SQL Server", "Armazena informações de contas e transações")

' API Application
Container(api_app, "API Application", "ASP.NET Core", "Gateway API principal")

' Relacionamentos
Rel(api_app, account_controller, "Invoca", "JSON/HTTPS")
Rel(api_app, transaction_controller, "Invoca", "JSON/HTTPS")
Rel(account_controller, account_service_component, "Usa")
Rel(transaction_controller, account_service_component, "Usa")
Rel(audit_controller, account_service_component, "Monitora")
Rel(account_service_component, account_repository, "Usa")
Rel(account_service_component, transaction_repository, "Usa")
Rel(account_repository, database, "Lê/Escreve", "JDBC")
Rel(transaction_repository, database, "Lê/Escreve", "JDBC")
Rel(audit_repository, database, "Escreve logs", "JDBC")

@enduml

@startuml "component_api_diagram"
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml
!define OUTPUTPATH src/plantuml/diagramas/L3-component/
!define OUTPUTFORMAT png

' Título do diagrama de componentes da API
title Sistema Bancário Digital - Diagrama de Componentes da API (Level 3)

' Container da API Application e seus componentes
Container_Boundary(api_app, "API Application") {
    Component(auth_controller, "AuthController", "ASP.NET MVC", "Gerencia autenticação e login")
    Component(customer_controller, "CustomerController", "ASP.NET MVC", "Gerencia informações de clientes")
    Component(security_service, "SecurityService", "C# Class", "Validação de tokens, papéis e permissões")
    Component(api_gateway, "APIGateway", "Ocelot", "Roteamento de requisições externas")
    Component(logger_component, "LoggerComponent", "Serilog", "Registra acessos e erros")
}

' Container de serviço de contas
Container(account_service, "Serviço de Contas", "Java/Spring", "Gerencia operações relacionadas a contas")

' Pessoa: cliente
Person(customer, "Cliente", "Usuário do banco")

' Relacionamentos
Rel(customer, api_gateway, "Acessa", "HTTPS")
Rel(api_gateway, auth_controller, "Redireciona", "HTTPS")
Rel(api_gateway, customer_controller, "Redireciona", "HTTPS")
Rel(auth_controller, security_service, "Usa")
Rel(customer_controller, security_service, "Usa")
Rel(auth_controller, logger_component, "Logs")
Rel(customer_controller, logger_component, "Logs")
Rel(customer_controller, account_service, "Invoca", "gRPC")

@enduml

@startuml "component_api_crosscutting_diagram"
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml
!define OUTPUTPATH src/plantuml/diagramas/L3-component/
!define OUTPUTFORMAT png

' Título do diagrama de componentes cross-cutting
title Sistema Bancário Digital - Diagrama de Componentes Cross-Cutting (Level 3)

' Container da API Application e seus componentes
Container_Boundary(api_app, "API Application - ASP.NET Core") {
    ' Controladores principais (core)
    Component(user_controller, "UserController", "ASP.NET MVC", "Gerencia operações de usuários")
    Component(account_controller, "AccountController", "ASP.NET MVC", "Gerencia operações de contas")
    Component(transaction_controller, "TransactionController", "ASP.NET MVC", "Gerencia transações")
    Component(metrics_collector, "MetricsCollector", "C#", "Monitora desempenho do sistema")

    ' Componentes cross-cutting
    Component(security_filter, "SecurityFilter", "Middleware", "Intercepta requisições para autenticação")
    Component(request_validator, "RequestValidator", "FluentValidation", "Valida dados de entrada")
    Component(error_handler, "ErrorHandler", "Middleware", "Tratamento global de exceções")
    Component(logging_interceptor, "LoggingInterceptor", "Serilog", "Registros centralizados")
    Component(openapi_docs, "OpenAPIDocumentation", "Swagger", "Gerador de documentação API")
}

' Relacionamentos dos componentes cross-cutting
Rel_D(security_filter, user_controller, "Intercepta", $tags="intercepts")
Rel_D(request_validator, account_controller, "Valida", $tags="validates")
Rel_D(error_handler, transaction_controller, "Gerencia erros", $tags="handles errors")
Rel_D(logging_interceptor, transaction_controller, "Registra atividades", $tags="logs")
Rel_D(openapi_docs, metrics_collector, "Documenta", $tags="documents")

@enduml

@startuml "component_api_springboot_diagram"
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml
!define OUTPUTPATH src/plantuml/diagramas/L3-component/
!define OUTPUTFORMAT png

' Título do diagrama de componentes Spring Boot
title Sistema Bancário Digital - Diagrama de Componentes da API Spring Boot (Level 3)

' Container da API Application e seus componentes
Container_Boundary(api_app, "API Application - Spring Boot") {
    ' Controladores principais (core)
    Component(user_controller, "UserController", "Spring MVC", "Gerencia operações de usuários")
    Component(account_controller, "AccountController", "Spring MVC", "Gerencia operações de contas")
    Component(transaction_controller, "TransactionController", "Spring MVC", "Gerencia transações")
    Component(metrics_collector, "MetricsCollector", "Micrometer", "Monitora desempenho do sistema")

    ' Componentes cross-cutting
    Component(security_filter, "SecurityFilter", "Spring Security", "Intercepta requisições para autenticação")
    Component(request_validator, "RequestValidator", "Bean Validation", "Valida dados de entrada")
    Component(error_handler, "ErrorHandler", "ControllerAdvice", "Tratamento global de exceções")
    Component(logging_interceptor, "LoggingInterceptor", "AOP/Aspect", "Registros centralizados")
    Component(openapi_docs, "OpenAPIDocumentation", "SpringDoc", "Gerador de documentação API")
}

' Relacionamentos dos componentes cross-cutting
Rel_D(security_filter, user_controller, "Intercepta", $tags="intercepts")
Rel_D(request_validator, account_controller, "Valida", $tags="validates")
Rel_D(error_handler, transaction_controller, "Gerencia erros", $tags="handles errors")
Rel_D(logging_interceptor, transaction_controller, "Registra atividades", $tags="logs")
Rel_D(openapi_docs, metrics_collector, "Documenta", $tags="documents")

@enduml

@startuml "code_transaction_management"
!theme plain
skinparam linetype ortho
skinparam backgroundColor #F5F5F5
skinparam class {
    BackgroundColor White
    BorderColor #0078D4
    ArrowColor #0078D4
}
!define OUTPUTPATH src/plantuml/diagramas/L4-code/
!define OUTPUTFORMAT png

' Diagrama de Código - Gerenciamento de Transações
class Transaction {
    - id: String
    - amount: Decimal
    - type: TransactionType
    - status: TransactionStatus
    - timestamp: DateTime
    - sourceAccountId: String
    - destinationAccountId: String
    - description: String
    + validate(): boolean
    + process(): void
    + rollback(): void
}

enum TransactionType {
    TRANSFER
    DEPOSIT
    WITHDRAWAL
    PAYMENT
}

enum TransactionStatus {
    PENDING
    PROCESSING
    COMPLETED
    FAILED
    ROLLED_BACK
}

class TransactionService {
    - transactionRepository: TransactionRepository
    - accountService: AccountService
    - notificationService: NotificationService
    + createTransaction(transaction: Transaction): Transaction
    + getTransaction(id: String): Transaction
    + updateTransactionStatus(id: String, status: TransactionStatus): void
    + listTransactionsByAccount(accountId: String): List<Transaction>
    + processTransaction(transaction: Transaction): void
    + rollbackTransaction(transaction: Transaction): void
}

class TransactionRepository {
    + save(transaction: Transaction): Transaction
    + findById(id: String): Optional<Transaction>
    + findByAccountId(accountId: String): List<Transaction>
    + updateStatus(id: String, status: TransactionStatus): void
    + findByStatus(status: TransactionStatus): List<Transaction>
}

class TransactionValidator {
    + validateAmount(amount: Decimal): boolean
    + validateAccount(accountId: String): boolean
    + validateBalance(accountId: String, amount: Decimal): boolean
    + validateLimits(accountId: String, amount: Decimal): boolean
    + validateTransactionType(type: TransactionType): boolean
}

class TransactionProcessor {
    - transactionValidator: TransactionValidator
    - accountService: AccountService
    + process(transaction: Transaction): void
    + executeTransaction(transaction: Transaction): void
    + rollbackTransaction(transaction: Transaction): void
    + notifyTransactionStatus(transaction: Transaction): void
    + validateTransaction(transaction: Transaction): boolean
}

Transaction --> TransactionService
TransactionService --> TransactionRepository
TransactionService --> TransactionProcessor
TransactionProcessor --> TransactionValidator
TransactionProcessor --> AccountService
TransactionService --> NotificationService

@enduml

@startuml "code_payment_processing"
!theme plain
skinparam linetype ortho
skinparam backgroundColor #F5F5F5
skinparam class {
    BackgroundColor White
    BorderColor #0078D4
    ArrowColor #0078D4
}
!define OUTPUTPATH src/plantuml/diagramas/L4-code/
!define OUTPUTFORMAT png

' Diagrama de Código - Processamento de Pagamentos
class Payment {
    - id: String
    - amount: Decimal
    - paymentMethod: PaymentMethod
    - status: PaymentStatus
    - timestamp: DateTime
    - payerId: String
    - payeeId: String
    - description: String
    - paymentDetails: PaymentDetails
    + validate(): boolean
    + process(): void
    + cancel(): void
}

enum PaymentMethod {
    CREDIT_CARD
    DEBIT_CARD
    PIX
    BOLETO
    BANK_TRANSFER
}

enum PaymentStatus {
    PENDING
    PROCESSING
    COMPLETED
    FAILED
    CANCELLED
    REFUNDED
}

class PaymentService {
    - paymentRepository: PaymentRepository
    - paymentProcessor: PaymentProcessor
    - notificationService: NotificationService
    + createPayment(payment: Payment): Payment
    + getPayment(id: String): Payment
    + updatePaymentStatus(id: String, status: PaymentStatus): void
    + processPayment(payment: Payment): void
    + cancelPayment(payment: Payment): void
    + refundPayment(payment: Payment): void
}

class PaymentRepository {
    + save(payment: Payment): Payment
    + findById(id: String): Optional<Payment>
    + findByPayerId(payerId: String): List<Payment>
    + findByPayeeId(payeeId: String): List<Payment>
    + updateStatus(id: String, status: PaymentStatus): void
}

class PaymentValidator {
    + validateAmount(amount: Decimal): boolean
    + validatePaymentMethod(method: PaymentMethod): boolean
    + validatePaymentDetails(details: PaymentDetails): boolean
    + validatePayer(payerId: String): boolean
    + validatePayee(payeeId: String): boolean
}

class PaymentProcessor {
    - paymentValidator: PaymentValidator
    - paymentGateway: PaymentGateway
    + process(payment: Payment): void
    + executePayment(payment: Payment): void
    + cancelPayment(payment: Payment): void
    + refundPayment(payment: Payment): void
    + validatePayment(payment: Payment): boolean
}

class PaymentGateway {
    + processPayment(payment: Payment): PaymentResult
    + cancelPayment(payment: Payment): PaymentResult
    + refundPayment(payment: Payment): PaymentResult
    + validatePaymentMethod(method: PaymentMethod): boolean
}

Payment --> PaymentService
PaymentService --> PaymentRepository
PaymentService --> PaymentProcessor
PaymentProcessor --> PaymentValidator
PaymentProcessor --> PaymentGateway
PaymentService --> NotificationService

@enduml 